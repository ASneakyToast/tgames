<template>
  <div class="home grid" id="grid">
    <section class="grid-list">
      <div v-for="(col, x) in board.tiles" :key="x" class="grid-item">
        <div v-for="(row, y) in col" :key="x-y" class="grid-item">
          <!--<div @click="tileClick(x, y)" -->
          <div @click="useTool(board.tiles[x][y])" 
               class="grid-content"
               :class="[ board.tiles[x][y].type ]">

            <!--
            {{ x }},{{ y }} <br>
            {{ board.tiles[x][y].distance }} <br>
            -->

            <!-- this way for iterating through specific known array
            <ul v-for="(player, i) in players" :key="i" class="players">
              <li v-if="player.x == x && player.y == y"
                  class="player">
                <p>player {{ player.id }}</p>
              </li>
            </ul>
            -->

            <!-- this way for checking what the tile has -->
            <div v-if="board.tiles[x][y].contains.length">
              <div v-if="board.tiles[x][y].contains.length">
                <div v-for="(piece, i) in board.tiles[x][y].contains" :key="i" class="pieces">
                  <p>{{ piece.name }}</p>
                </div>
              </div>
            </div>

          </div>
        </div>
      </div>
    </section>
  </div>
</template>

<script>
function getRandom(max) {
  return Math.floor(Math.random() * Math.floor(max));
}

class Zone {
  constructor(base) {
    this.base = base;
    this.x = base.x;
    this.y = base.y;
    this.group = base.group;
    this.tiles = [];
  }

  addAll() {
   alert("whoops"); 
  }
}
let zone = new Zone({x:1,y:3,type:2,group:2});
console.log(zone);

class Tile {
  constructor(x, y, type, group) {
    this.x = x;
    this.y = y;
    this.distance = 0;
    this.contains = [];
    this.group = group;
    if (!isNaN(type)) {
      switch (Number(type)) {
        case 0:
          this.type = "water";
          break;
        case 1:
          this.type = "grass";
          break;
        case 2:
          this.type = "tree";
          break;
      }
    } else {
      this.type = type;
    }
  }
}

//TODO: Make a piece class for board items and a card class for non-physical items
class Piece {
  constructor(tile) {
    this.x = tile.x;
    this.y = tile.y;
    this.type = "default";
  }
}

class Player extends Piece{
  constructor(tile, id) {
    super(tile); 
    this.type = "player";
    this.id = id;

    this.name = this.type +" "+ this.id;
  }
}

//TODO: Seperate out hamr logic into another game class
class Board {
  constructor(width, height) {
    this.width = width;
    this.height = height;
    this.tiles = [];
    this.generate();
  }

  generate() {
    this.tiles = [];
    for (let x=0; x<this.width; x++) {
      this.tiles.push([]);
      for (let y=0; y<this.height; y++) {
        this.tiles[x].push(new Tile(x, y, getRandom(2), getRandom(6)));
      }
    }
  }

  remove(piece) {
    if (this.tiles[piece.x][piece.y].contains.length) {
      alert("remlving pieve");
      //or if tile has piece
      this.tiles[piece.x][piece.y].contains.shift();
      /*
        //if piece has location
        piece.x = -1;
        piece.y = -1;
      */
      return piece;
    } else {
      alert("error: tile does not contain piece");
    }
  }

  place(piece, tile) {
    //if piece has location
    piece.x = tile.x;
    piece.y = tile.y;
    //or if tile has piece
    this.tiles[tile.x][tile.y].contains.push(piece);
    alert("yep");
    alert(piece.x +","+ piece.y);
    alert(tile.contains[0].x +","+ tile.contains[0].y);
  }

  move(piece, to) {
    this.remove(piece);
    alert(piece.x +","+ piece.y);
    this.place(piece, to);
    alert(to.contains[0].x +","+ to.contains[0].y);
  }

  getSafeSpawn() {
    let spawnable = [];
    for (let col in this.tiles) {
      for (let row in this.tiles[col]) {
        if (this.isTravesable(this.tiles[col][row])) {
          spawnable.push(this.tiles[col][row]);
        }
      }
    }
    return spawnable[getRandom(spawnable.length)];
  }

  getTileDistance(from, to) {
    this.resetDistances();
    let queue = [from];
    let visited = [];

    while(queue.length) {
      let currentTile = queue.shift();
      visited.push(currentTile);

      if (currentTile == to) {
        return currentTile.distance;
      }

      let surroundings = this.getTileSurroundings(currentTile);
      surroundings.forEach((tile) => {
        if (!visited.includes(tile)) {
          this.tiles[tile.x][tile.y].distance = ( currentTile.distance+1 );

          //TODO: for shortest path line
          this.tiles[tile.x][tile.y].parent = this.tiles[currentTile.x][currentTile.y];

          queue.push(this.tiles[tile.x][tile.y]);
        }
      });
    }
  }
      

  /* Old without checking if tile is travesrable
  updateDistances(centerTile) {
    if (centerTile == 0 || centerTile == "reset") {
      for (let col in this.tiles) {
        for (let row in this.tiles[col]) {
          let tile = this.tiles[col][row]
          tile.distance = 0;
        }
      }
    } else {
      let queue = [centerTile];
      let visited = [];
      
      while(queue.length) {
        let currentTile = queue.shift();
        visited.push(currentTile);
        
        let surroundings = this.getTileSurroundings(currentTile);
        surroundings.forEach((tile) => {
          if (!visited.includes(tile)) {
            this.tiles[tile.x][tile.y].distance = ( currentTile.distance+1 );
            queue.push(this.tiles[tile.x][tile.y]);
          }
        });
      }
    }
  }
  */ 

  updateDistances(centerTile) {
    this.resetDistances();
    let queue = [centerTile];
    let visited = [];
    
    while(queue.length) {
      let currentTile = queue.shift();
      visited.push(currentTile);
      
      let surroundings = this.getTileSurroundings(currentTile); 
      surroundings.forEach((tile) => {
        if (!visited.includes(tile) && this.isTravesable(tile)) {
          this.tiles[tile.x][tile.y].distance = ( currentTile.distance+1 );
          queue.push(this.tiles[tile.x][tile.y]);
        }
      });
    }
  }

  isTravesable(tile) {
    if (tile.type == "water") {
      return false;
    } else {
      return true;
    }
  }

  resetDistances() {
    for (let col in this.tiles) {
      for (let row in this.tiles[col]) {
        let tile = this.tiles[col][row]
        tile.distance = 0;
      }
    }
  }

  getTile(x, y) {
    return this.tiles[x][y];
  }

  getTileSurroundings(tile) {
    let surroundings = [];
    // top, right, bottom, left
    if (( tile.y - 1 ) >= 0) {
      surroundings.push(this.tiles[tile.x][tile.y - 1]);
    }
    if (( tile.x + 1 ) < this.width) {
      surroundings.push(this.tiles[tile.x + 1][tile.y]);
    }
    if (( tile.y + 1 ) < this.height) {
      surroundings.push(this.tiles[tile.x][tile.y + 1]);
    }
    if (( tile.x - 1 ) >= 0) {
      surroundings.push(this.tiles[tile.x - 1][tile.y]);
    }
    return(surroundings);
  }
}

export default {
  name: 'Home',
  data() {
    return {
      players: Array,
      board: Object,
      cols: 5,
      rows: 5,
      selected: false,

      tool: "debug-move"
    }
  },
  methods: {
    tileClick(col, row) {
      alert("test!"+col+row);
    },
    checkDistance(tile) {
      if (!this.selected) {
        this.selected = tile;
      } else {
        this.board.getTileDistance(this.selected, tile);
        this.selected = false;
      }
    },
    debugDistance(tile) {
      this.selected = tile;
      this.board.updateDistances(tile);
    },
    debugMove(target) {
      if (!this.selected) {
        this.selected = target;
        alert("selected");
      } else {
        alert("moving");
        this.board.move(this.selected, target);
      }
    },
    useTool(tile) {
      if (this.tool == "debug-surroundings") {
        this.checkSurroundings(tile);
      } else if (this.tool == "debug-distance") {
        this.debugDistance("reset");
        this.debugDistance(tile);
      } else if (this.tool == "check-distance") {
        this.checkDistance(tile);
      } else if (this.tool == "debug-move") {
        alert("use tool");
        this.debugMove(tile);
      }
    },
  },
  created() {
    this.board = new Board(this.cols, this.rows);
    //TODO: Create onGenerate hook for custom logic, then move class to its own module.
    this.board.generate();

    //Place Players + items
    let safeSpawn = this.board.getSafeSpawn();
    let playerOne = new Player(safeSpawn, 1);
    this.players = [playerOne];
    this.board.place(playerOne, safeSpawn);
  }
}
</script>

<style lang="scss">
#app {
  font-family: Avenir, Helvetica, Arial, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  color: #2c3e50;
  margin-top: 60px;
}

ul, li, p, div {
  margin: 0;
  padding: 0;
}

.grass {
  background-color: green;
}

.water {
  background-color: blue;
}

.empty {
  background-color: white;
}

.grid-list {
  --amount: 25;
  --cols: 5;
  display: grid;
  grid-wrap: wrap;
  grid-template-columns: repeat(var(--cols), 1fr);

  position: relative;
  padding: 0;
  margin: 0;
}

.grid-item {
  height: 0;
  padding-bottom: 90%;
  position: relative;
}

.grid-content {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  text-align: center;
  position: absolute;
  height: 100%;
  width: 100%;
  color: #111111;
  padding: 0;
  margin: 0;
}

</style>
